api:
  ports:
  - port: 8087
    protocol: TCP
    targetPort: 8087
  replicas: 1
  sparkapi:
    image:
      repository: registry.cn-shanghai.aliyuncs.com/kyligence/sparkapi
      tag: latest
      imagePullPolicy: Always
  type: NodePort
kubernetesClusterDomain: cluster.local
env: 
  InfluxDBHost: http://spark-dashboard-influx.default.svc.cluster.local:8086
  InfluxDBDatabase: sparkmeasure
  PromRemoteWriteUrl: http://kube-prometheus-kube-prome-prometheus.monitor.svc.cluster.local:9090/api/v1/write
  PromHttpUrl: http://kube-prometheus-thanos-query-frontend.monitor.svc.cluster.local:9090
  DashboardUrlTemplate: http://10.1.2.63:31219/d/-H0ElOqmiv/spark_perf_dashboard_v03?from=%s&to=%s&var-UserName=xxx&var-ApplicationId=%s
  KafkaBrokers: spark-metrics-collector-kafka-brokers.spark.svc.cluster.local:9092
  KafkaTopic: sparkmeasure
  BatchSendNum: '1000'


strimzi-kafka-operator:
  enabled: true
  # used for kafkacluster cr
  kafkacluster:
    name: kafka
    enabled: true
    version: 3.2.0
    replicas:
      kafka: 3
      zookeeper: 3
    #namespace: kafka
    externallistener:
      type:  nodeport
    config: 
      auto.create.topics.enable: true
      num.partitions: 32
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      default.replication.factor: 3
      min.insync.replicas: 2
      inter.broker.protocol.version: "3.2"    
    storage:
       kafka:
         type: persistent-claim
         size: 2Gi
         class: longhorn
         deleteClaim: true   
       zookeeper:
         type: persistent-claim
         size: 2Gi
         class: longhorn
         deleteClaim: true      
          
    
  